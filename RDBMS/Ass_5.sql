CREATE DATABASE FoodBookingApp;

USE FoodBookingApp;

CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50),
    Rating DECIMAL(2, 1),
    AverageCostForTwo DECIMAL(10, 2)
);

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15),
    City VARCHAR(50),
    JoinDate DATE
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10, 2),
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2, 1),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

INSERT INTO Restaurants VALUES
(1, 'Spicy Treat', 'Mumbai', 'Indian', 4.6, 700),
(2, 'Pasta Paradise', 'Mumbai', 'Italian', 4.3, 800),
(3, 'Dragon House', 'Delhi', 'Chinese', 4.7, 500),
(4, 'Pizza Place', 'Bangalore', 'Italian', 4.8, 900),
(5, 'Bombay Biryani', 'Mumbai', 'Indian', 4.4, 600),
(6, 'Golden Dragon', 'Chennai', 'Chinese', 4.2, 750),
(7, 'Sushi World', 'Mumbai', 'Japanese', 4.5, 1200),
(8, 'Taco Fiesta', 'Pune', 'Mexican', 4.1, 650),
(9, 'Burger Corner', 'Kolkata', 'American', 4.0, 400),
(10, 'Curry Delight', 'Hyderabad', 'Indian', 4.5, 550);

select * from Restaurants;

INSERT INTO Customers VALUES
(1, 'John', 'Doe', '9876543210', 'Mumbai', '2023-01-15'),
(2, 'Jane', 'Smith', '8765432109', 'Delhi', '2023-03-20'),
(3, 'Bob', 'Brown', '7654321098', 'Mumbai', '2023-05-10'),
(4, 'Alice', 'Johnson', '6543210987', 'Bangalore', '2023-06-25'),
(5, 'Charlie', 'Davis', '5432109876', 'Chennai', '2023-07-30'),
(6, 'Eve', 'Williams', '4321098765', 'Pune', '2023-08-05'),
(7, 'Mallory', 'Garcia', '3210987654', 'Hyderabad', '2023-09-10'),
(8, 'Trudy', 'Martinez', '2109876543', 'Mumbai', '2023-10-15'),
(9, 'Oscar', 'Lee', '1098765432', 'Kolkata', '2023-11-01'),
(10, 'Peggy', 'Harris', '0198765431', 'Delhi', '2023-12-12');

select * from Restaurants;

INSERT INTO Orders VALUES
(1, 1, 1, '2023-10-01', 1500, 'Delivered'),
(2, 2, 3, '2023-10-05', 1200, 'Cancelled'),
(3, 3, 2, '2023-10-10', 800, 'Delivered'),
(4, 4, 4, '2023-10-15', 2000, 'Delivered'),
(5, 5, 5, '2023-10-20', 600, 'Pending'),
(6, 6, 6, '2023-10-25', 750, 'Delivered'),
(7, 7, 7, '2023-10-30', 1200, 'Delivered'),
(8, 8, 8, '2023-11-01', 650, 'Delivered'),
(9, 9, 9, '2023-11-05', 400, 'Cancelled'),
(10, 10, 10, '2023-11-10', 550, 'Delivered');

select * from  Orders ;

INSERT INTO Reviews VALUES
(1, 1, 1, 5, 'Amazing food!', '2023-10-02'),
(2, 2, 3, 4, 'Great experience.', '2023-10-06'),
(3, 3, 2, 3.5, 'Good, but could be better.', '2023-10-11'),
(4, 4, 4, 5, 'Best pizza in town!', '2023-10-16'),
(5, 5, 5, 4.5, 'Tasty biryani.', '2023-10-21'),
(6, 6, 6, 3.8, 'Average.', '2023-10-26'),
(7, 7, 7, 4.5, 'Loved the sushi.', '2023-10-31'),
(8, 8, 8, 4, 'Nice tacos.', '2023-11-02'),
(9, 9, 9, 3.2, 'Decent burgers.', '2023-11-06'),
(10, 10, 10, 4.8, 'Delicious curry!', '2023-11-11');

select * from Reviews;

INSERT INTO Payments VALUES
(1, 1, 'Card', 1500, '2023-10-01'),
(2, 3, 'Wallet', 800, '2023-10-10'),
(3, 4, 'Card', 2000, '2023-10-15'),
(4, 6, 'Cash', 750, '2023-10-25'),
(5, 7, 'Card', 1200, '2023-10-30'),
(6, 8, 'Wallet', 650, '2023-11-01'),
(7, 10, 'Cash', 550, '2023-11-10');

select * from Payments;

                                          -- Queries for tasks

-- 1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.

SELECT Name, City FROM Restaurants WHERE Rating >= 4.5;

-- 2. Find the total number of orders placed by each customer.

SELECT CustomerID, COUNT(*) AS TotalOrders FROM Orders GROUP BY CustomerID;

-- 3. List all restaurants offering "Italian" cuisine in "Mumbai".

SELECT Name FROM Restaurants WHERE CuisineType = 'Italian' AND City = 'Mumbai';

-- 4. Calculate the total revenue generated by each restaurant from completed orders.

SELECT r.Name, SUM(o.OrderAmount) AS TotalRevenue 
FROM Orders o
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.Name;

-- 5. Retrieve the most recent order placed by each customer.

SELECT CustomerID, MAX(OrderDate) AS RecentOrderDate FROM Orders GROUP BY CustomerID;

-- 6. List customers who have not placed any orders yet.

SELECT c.FirstName, c.LastName 
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.CustomerID IS NULL;

-- 7. Identify the most reviewed restaurants.

SELECT r.Name, COUNT(*) AS ReviewCount 
FROM Reviews rv
JOIN Restaurants r ON rv.RestaurantID = r.RestaurantID
GROUP BY r.Name
ORDER BY ReviewCount DESC;

-- 8. Find the most preferred payment method.

SELECT TOP 1 PaymentMethod, COUNT(*) AS UsageCount 
FROM Payments
GROUP BY PaymentMethod
ORDER BY UsageCount DESC;


-- 9. List the top 5 restaurants by total revenue.

SELECT TOP 5 r.Name, SUM(o.OrderAmount) AS TotalRevenue 
FROM Orders o
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Delivered'
GROUP BY r.Name
ORDER BY TotalRevenue DESC;


-- 10. Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT o.OrderID, c.FirstName, c.LastName, r.Name AS RestaurantName, o.OrderDate, o.OrderAmount 
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';
